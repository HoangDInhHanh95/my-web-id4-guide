document.addEventListener("DOMContentLoaded", function() {
    // Bi·∫øn to√†n c·ª•c ƒë·ªÉ theo d√µi kh·ªëi cu·ªôn n√†o ƒëang active
    let activeScrollInstance = null;

    const image1 = 'http://localhost/iD4Center/wp-content/uploads/2025/09/MHDPT-1.png';

    // D·ªØ li·ªáu cho kh·ªëi cu·ªôn th·ª© nh·∫•t
    const cardData1 = [
        { title: '‚ú® L·∫≠p k·∫ø ho·∫°ch ch√≠nh x√°c', description: 'V·ªã tr√≠ h·∫° m√†o x∆∞∆°ng/ V·ªã tr√≠ Implant/ Abutment / Ph·ª•c h√¨nh: T·∫•t c·∫£ ƒë·ªÅu ƒë∆∞·ª£c ph√¢n t√≠ch l√™n k·∫ø ho·∫°ch v√† thi·∫øt k·∫ø ch√≠nh x√°c.', imageUrl: image1 },
        { title: 'üöÄ Hi·ªáu nƒÉng cao', description: 'S·ª≠ d·ª•ng Intersection Observer v√† c√°c k·ªπ thu·∫≠t hi·ªán ƒë·∫°i ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªô m∆∞·ª£t t·ªëi ƒëa.', imageUrl: image1 },
        { title: 'üé® Gi√†u t∆∞∆°ng t√°c', description: 'Ph·∫£n h·ªìi v·ªõi thao t√°c di chu·ªôt, click v√† ƒëi·ªÅu h∆∞·ªõng b√†n ph√≠m m·ªôt c√°ch th√¥ng minh.', imageUrl: image1 },
        { title: '‚ôø D·ªÖ ti·∫øp c·∫≠n', description: 'H·ªó tr·ª£ ƒëi·ªÅu h∆∞·ªõng b·∫±ng b√†n ph√≠m, gi√∫p m·ªçi ng∆∞·ªùi d√πng ƒë·ªÅu c√≥ th·ªÉ tr·∫£i nghi·ªám tr·ªçn v·∫πn.', imageUrl: image1 },
        { title: 'üì± ƒê·ªìng nh·∫•t', description: 'Tr·∫£i nghi·ªám cu·ªôn d·ªçc-ngang ƒë·ªôc ƒë√°o ƒë∆∞·ª£c ƒë·ªìng b·ªô tr√™n m·ªçi thi·∫øt b·ªã, t·ª´ l·ªõn ƒë·∫øn nh·ªè.', imageUrl: image1 }
    ];

    // D·ªØ li·ªáu cho kh·ªëi cu·ªôn th·ª© hai (n·∫øu c√≥)
    const cardData2 = [{
            title: 'Title for Section 2',
            description: 'Description for section 2.',
            imageUrl: image1
        },
        {
            title: 'Another title',
            description: 'Another description here.',
            imageUrl: image1
        }
    ];

    /**
     * H√ÄM KH·ªûI T·∫†O HI·ªÜU ·ª®NG CU·ªòN NGANG (PHI√äN B·∫¢N S·ª¨A L·ªñI)
     * @param {object} config - ƒê·ªëi t∆∞·ª£ng c·∫•u h√¨nh
     */
    function initializeHorizontalScroll(config) {
        const mainContainer = document.querySelector(config.selectors.mainContainer);
        if (!mainContainer) return;

        const contentContainer = mainContainer.querySelector(config.selectors.contentContainer);
        const track = mainContainer.querySelector(config.selectors.track);
        const modalOverlay = mainContainer.querySelector(config.selectors.modalOverlay);
        const modalContent = mainContainer.querySelector(config.selectors.modalContent);
        const modalClose = mainContainer.querySelector(config.selectors.modalClose);
        const progressBar = mainContainer.querySelector(config.selectors.progressBar);

        // T·∫°o HTML t·ª´ d·ªØ li·ªáu
        contentContainer.innerHTML = config.data.map(data => `
            <div class="${config.classes.card}">
                <div class="${config.classes.cardText}">
                    <h2>${data.title}</h2>
                    <p>${data.description}</p>
                </div>
                <div class="${config.classes.cardImage}">
                    <img src="${data.imageUrl}" alt="${data.title}" loading="lazy">
                </div>
            </div>
        `).join('');

        const cards = Array.from(contentContainer.children);

        // --- Logic c·ªßa ri√™ng instance n√†y ---
        const instance = {
            track,
            cards,
            modalOverlay,
            closeModal: () => {
                modalOverlay.classList.remove(config.classes.active);
                document.body.classList.remove(config.classes.modalOpen);
            }
        };

        function openModal(contentHTML) {
            modalContent.innerHTML = contentHTML;
            modalOverlay.classList.add(config.classes.active);
            document.body.classList.add(config.classes.modalOpen);
        }

        cards.forEach(card => card.addEventListener('click', () => openModal(card.innerHTML)));
        modalClose.addEventListener('click', instance.closeModal);
        modalOverlay.addEventListener('click', (e) => {
            if (e.target === modalOverlay) instance.closeModal();
        });

        // Logic cu·ªôn v√† animation
        let currentX = 0,
            targetX = 0,
            easingFactor = 0.08;

        function lerp(start, end, t) { return start * (1 - t) + end * t; }

        function updatePositions() {
            const trackRect = track.getBoundingClientRect();
            if (trackRect.top <= 0 && trackRect.bottom >= window.innerHeight) {
                const scrollInTrack = -trackRect.top;
                const scrollableDistance = trackRect.height - window.innerHeight;
                const scrollProgress = Math.max(0, Math.min(1, scrollInTrack / scrollableDistance));

                const firstCard = cards[0];
                const lastCard = cards[cards.length - 1];
                const contentScrollWidth = lastCard.offsetLeft - firstCard.offsetLeft;

                targetX = -contentScrollWidth * scrollProgress;
                if (progressBar) progressBar.style.width = (scrollProgress * 100) + '%';
            }
            currentX = lerp(currentX, targetX, easingFactor);
            contentContainer.style.transform = `translateX(${currentX}px)`;
        }

        function animationLoop() {
            // Ch·ªâ ch·∫°y animation n·∫øu n√≥ l√† instance ƒëang active
            if (activeScrollInstance === instance) {
                updatePositions();
            }
            requestAnimationFrame(animationLoop);
        }

        // D√πng IntersectionObserver ƒë·ªÉ set instance n√†o ƒëang active
        const trackObserver = new IntersectionObserver((entries) => {
            if (entries[0].isIntersecting) {
                activeScrollInstance = instance;
            } else {
                // N·∫øu instance n√†y r·ªùi m√†n h√¨nh v√† n√≥ ƒëang l√† active, th√¨ h·ªßy active
                if (activeScrollInstance === instance) {
                    activeScrollInstance = null;
                }
            }
        }, { threshold: 0.1 }); // threshold 0.1 ƒë·ªÉ ƒë·∫£m b·∫£o m·ªôt ph·∫ßn c·ªßa track ƒë√£ v√†o m√†n h√¨nh

        trackObserver.observe(track);
        animationLoop(); // B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p animation
    }

    // --- KH·ªûI T·∫†O C√ÅC KH·ªêI CU·ªòN ---
    // Kh·ªëi 1
    initializeHorizontalScroll({
        data: cardData1,
        selectors: {
            mainContainer: '.id4-guide-container',
            contentContainer: '.id4-guide-horizontal-content',
            track: '.id4-guide-horizontal-track',
            modalOverlay: '.id4-guide-modal-overlay',
            modalContent: '.id4-guide-modal-content',
            modalClose: '.id4-guide-modal-close',
            progressBar: '.id4-guide-progress-bar',
        },
        classes: { /* ... c√°c class cho kh·ªëi 1 ... */
            card: 'id4-guide-card',
            cardText: 'id4-guide-card-text',
            cardImage: 'id4-guide-card-image',
            active: 'id4-guide-active',
            modalOpen: 'id4-guide-modal-open'
        }
    });

    // Kh·ªëi 2
    initializeHorizontalScroll({
        data: cardData2,
        selectors: {
            mainContainer: '.id4-container',
            contentContainer: '.id4-horizontal-content',
            track: '.id4-horizontal-track',
            modalOverlay: '.id4-modal-overlay',
            modalContent: '.id4-modal-content',
            modalClose: '.id4-modal-close',
            progressBar: '.id4-progress-bar',
        },
        classes: { /* ... c√°c class cho kh·ªëi 2 ... */
            card: 'id4-card',
            cardText: 'id4-card-text',
            cardImage: 'id4-card-image',
            active: 'id4-active',
            modalOpen: 'id4-modal-open'
        }
    });

    // --- TR√åNH L·∫ÆNG NGHE B√ÄN PH√çM TO√ÄN C·ª§C DUY NH·∫§T ---
    window.addEventListener('keydown', (e) => {
        // Lu√¥n ki·ªÉm tra xem c√≥ instance n√†o ƒëang active kh√¥ng
        if (!activeScrollInstance) return;

        // 1. Logic ƒë√≥ng Modal b·∫±ng ph√≠m Escape
        if (e.key === 'Escape' && activeScrollInstance.modalOverlay.classList.contains('id4-guide-active', 'id4-active')) {
            activeScrollInstance.closeModal();
            return; // D·ª´ng l·∫°i sau khi ƒë√≥ng modal
        }

        // 2. Logic ƒëi·ªÅu h∆∞·ªõng b·∫±ng ph√≠m m≈©i t√™n
        if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {
            const { track, cards } = activeScrollInstance;

            // Ki·ªÉm tra n·∫øu modal ƒëang m·ªü th√¨ kh√¥ng cho cu·ªôn
            if (activeScrollInstance.modalOverlay.classList.contains('id4-guide-active', 'id4-active')) return;

            e.preventDefault();

            const scrollableDistance = track.offsetHeight - window.innerHeight;
            const progressPerCard = 1 / (cards.length - 1);
            const currentScroll = window.scrollY - track.offsetTop;
            const currentProgress = currentScroll / scrollableDistance;
            const currentIndex = Math.round(currentProgress / progressPerCard);

            let targetIndex = currentIndex;
            if (e.key === 'ArrowRight') {
                targetIndex = Math.min(cards.length - 1, currentIndex + 1);
            } else if (e.key === 'ArrowLeft') {
                targetIndex = Math.max(0, currentIndex - 1);
            }

            if (targetIndex !== currentIndex) {
                const targetScrollTop = track.offsetTop + (scrollableDistance * progressPerCard * targetIndex);
                window.scrollTo({
                    top: targetScrollTop,
                    behavior: 'smooth'
                });
            }
        }
    });
});